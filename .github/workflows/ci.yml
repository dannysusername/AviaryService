name: CI for AviaryService
on:
  push: # When code is pushed to these branches
    branches: [ newfeature, main ]  
  pull_request: 
    branches: [ main ]  # Trigger on PRs to main

jobs:
  #Workflow for feature branches (2 jobs: feature-build-and-test, main-build-and-deploy)
  feature-build-and-test:
    if: github.ref != 'refs/heads/main' # Runs for all branches other than main
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history, no shallow clone

      - name: Cache Gradle
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches # Uses actions/cache to cache Gradle dependencies to speed up builds
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}

      - name: Set up JDK 21 # Uses actions/setup-java to set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'zulu'
      - name: Make Gradle Wrapper Executable # Runs chmod to make gradlew executable on Ubuntu runner
        run: chmod +x ./gradlew  
      - name: Build with Gradle
        run: ./gradlew build -x test  # Builds the project but skips tests for faster feedback
      - name: Run Unit Tests
        run: ./gradlew test --stacktrace --info

  main-build-and-deploy:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history, no shallow clone
      - name: Cache Gradle
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }} 
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'zulu'
      - name: Make Gradle Wrapper Executable
        run: chmod +x ./gradlew
      - name: Build with Gradle
        run: ./gradlew build -x test
      - name: Deploy to Heroku Staging # Uses the HEROKU_API_KEY secret stored on GitHub secrets to authenticate to authenticate and deploys to Heroku
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: |
          git remote add heroku-staging https://heroku:${HEROKU_API_KEY}@git.heroku.com/aviarist-staging.git
          git push heroku-staging main